#!/usr/bin/env perl

use strict;
use warnings;

use Config::Tiny;
use CoverArtArchive::Indexer;
use CoverArtArchive::Indexer::Context;
use CoverArtArchive::IAS3Request;
use DBIx::Simple;
use Getopt::Long;
use Log::Contextual::SimpleLogger;
use Log::Contextual qw( :log ),
   -logger => Log::Contextual::SimpleLogger->new({ levels_upto => 'trace' });
use LWP::UserAgent;
use Moose::Util qw( ensure_all_roles );
use Net::Amazon::S3;
use Net::Amazon::S3::HTTPRequest;
use Net::RabbitFoot;
use Pod::Usage;
use Try::Tiny;

Net::Amazon::S3::HTTPRequest->meta->make_mutable;
ensure_all_roles('Net::Amazon::S3::HTTPRequest', 'CoverArtArchive::IAS3Request');

my $config_file = !@ARGV || $_[0] =~ /^-/
        ? 'config.ini'
        : shift();

my $config = Config::Tiny->read($config_file);

log_warn{ "Could not find a config file (wanted $config_file), supply command line arguments or provide a config.ini file" }
    unless -f $config_file;

my $verbose = 0;
my $db_name = $config->{database}{database};
my $db_user = $config->{database}{user};
my $db_host = $config->{database}{host};
my $db_port = $config->{database}{port};
my $db_pass = $config->{database}{password};
my $opt_help;
my $access_key = $config->{caa}{public_key};
my $secret_access_key = $config->{caa}{private_key};

GetOptions ("user=s" => \$db_user,
            "db=s"   => \$db_name,
            "verbose"  => \$verbose,
            "help|?" => \$opt_help,
            "public=s" => \$access_key,
            "private=s" => \$secret_access_key,
            "host=s" => \$db_host
        )
    or pod2usage();
pod2usage(-verbose => 2) if $opt_help;

my $dbh = DBIx::Simple->connect(
    "dbi:Pg:host=$db_host;dbname=$db_name;port=$db_port", $db_user, $db_pass)
    or die DBIx::Simple->error;

CoverArtArchive::Indexer->new(
    c => CoverArtArchive::Indexer::Context->new(
        lwp => LWP::UserAgent->new,
        dbh => $dbh,
        s3 => Net::Amazon::S3->new(
            aws_access_key_id     => $access_key,
            aws_secret_access_key => $secret_access_key
        ),
        rabbitmq => Net::RabbitFoot->new->load_xml_spec->connect(
            map { $_ => $config->{rabbitmq}{$_} }
                qw ( host port user pass vhost )
        )->open_channel
    )
)->run;

__END__

=head1 NAME

caa-indexer

=head1 OPTIONS

=over 4

=item --verbose

Run in verbose mode, showing detailed logging.

=item --db

The name of the database to connect to poll for Cover Art Archive events.

=item --user

The user name to use when connecting to the database.

=item --public

Your Internet Archive public key

=item --private

Your Internet Archive private key

=item --host

The PostgreSQL database host to connect to

=back

=head1 DESCRIPTION

The main database has a queue that holds events about releases that have cover
art. If a release that has cover art is in some way updated, such as the name
changing, an event is produced. This project is a consumer of that queue, and
runs as a daemon. When it receieves events, it looks up the information
necessary to produce an index file, and sticks it on the Internet Archive's
backend servers.

=cut
